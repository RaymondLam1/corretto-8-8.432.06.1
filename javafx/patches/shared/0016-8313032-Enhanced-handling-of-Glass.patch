From 45881985b240b625739587fd3e25d6449bd78699 Mon Sep 17 00:00:00 2001
From: Kevin Rushforth <kcr@openjdk.org>
Date: Mon, 20 Nov 2023 13:35:49 +0000
Subject: [PATCH] 8313032: Enhanced handling of Glass

Reviewed-by: lkostyra, rhalade, arapte
---
 .../src/main/native-glass/gtk/GlassPixels.cpp | 12 ++++---
 .../native-glass/gtk/GlassSystemClipboard.cpp |  9 ++++++
 .../src/main/native-glass/gtk/glass_dnd.cpp   |  9 ++++--
 .../main/native-glass/gtk/glass_general.cpp   |  8 +++++
 .../main/native-glass/win/GlassClipboard.cpp  | 32 +++++++++++++++++--
 .../src/main/native-glass/win/OleUtils.h      |  1 +
 .../src/main/native-glass/win/Utils.h         |  3 +-
 7 files changed, 65 insertions(+), 9 deletions(-)

diff --git a/modules/graphics/src/main/native-glass/gtk/GlassPixels.cpp b/modules/graphics/src/main/native-glass/gtk/GlassPixels.cpp
index 354f3c60..06cffdf5 100644
--- a/modules/graphics/src/main/native-glass/gtk/GlassPixels.cpp
+++ b/modules/graphics/src/main/native-glass/gtk/GlassPixels.cpp
@@ -83,8 +83,10 @@ JNIEXPORT void JNICALL Java_com_sun_glass_ui_gtk_GtkPixels__1attachInt
 
     pixbuf = (GdkPixbuf**)JLONG_TO_PTR(ptr);
     dataRGBA = convert_BGRA_to_RGBA(data + offset, w*4, h);
-    *pixbuf = gdk_pixbuf_new_from_data(dataRGBA, GDK_COLORSPACE_RGB, TRUE, 8,
-                  w, h, w * 4, (GdkPixbufDestroyNotify) my_free, NULL);
+    if (dataRGBA) {
+        *pixbuf = gdk_pixbuf_new_from_data(dataRGBA, GDK_COLORSPACE_RGB, TRUE, 8,
+                w, h, w * 4, (GdkPixbufDestroyNotify) my_free, NULL);
+    }
     if (array != NULL) {
         env->ReleasePrimitiveArrayCritical(array, data, 0);
     }
@@ -115,8 +117,10 @@ JNIEXPORT void JNICALL Java_com_sun_glass_ui_gtk_GtkPixels__1attachByte
 
     pixbuf = (GdkPixbuf**)JLONG_TO_PTR(ptr);
     dataRGBA = convert_BGRA_to_RGBA((const int*)(data + offset), w*4, h);
-    *pixbuf = gdk_pixbuf_new_from_data(dataRGBA, GDK_COLORSPACE_RGB, TRUE, 8,
-                  w, h, w * 4, (GdkPixbufDestroyNotify) my_free, NULL);
+    if (dataRGBA) {
+        *pixbuf = gdk_pixbuf_new_from_data(dataRGBA, GDK_COLORSPACE_RGB, TRUE, 8,
+                w, h, w * 4, (GdkPixbufDestroyNotify) my_free, NULL);
+    }
     if (array != NULL) {
         env->ReleasePrimitiveArrayCritical(array, data, 0);
     }
diff --git a/modules/graphics/src/main/native-glass/gtk/GlassSystemClipboard.cpp b/modules/graphics/src/main/native-glass/gtk/GlassSystemClipboard.cpp
index c671860a..d926db31 100644
--- a/modules/graphics/src/main/native-glass/gtk/GlassSystemClipboard.cpp
+++ b/modules/graphics/src/main/native-glass/gtk/GlassSystemClipboard.cpp
@@ -317,10 +317,19 @@ static jobject get_data_image(JNIEnv* env) {
     h = gdk_pixbuf_get_height(pixbuf);
     stride = gdk_pixbuf_get_rowstride(pixbuf);
 
+    if (stride <= 0 || h <= 0 || (h > INT_MAX / stride)) {
+        g_object_unref(pixbuf);
+        return NULL;
+    }
+
     data = gdk_pixbuf_get_pixels(pixbuf);
 
     //Actually, we are converting RGBA to BGRA, but that's the same operation
     data = (guchar*) convert_BGRA_to_RGBA((int*)data, stride, h);
+    if (!data) {
+        g_object_unref(pixbuf);
+        return NULL;
+    }
 
     data_array = env->NewByteArray(stride*h);
     EXCEPTION_OCCURED(env);
diff --git a/modules/graphics/src/main/native-glass/gtk/glass_dnd.cpp b/modules/graphics/src/main/native-glass/gtk/glass_dnd.cpp
index 9c7505ff..f1ddb3cf 100644
--- a/modules/graphics/src/main/native-glass/gtk/glass_dnd.cpp
+++ b/modules/graphics/src/main/native-glass/gtk/glass_dnd.cpp
@@ -413,7 +413,7 @@ static jobject dnd_target_get_image(JNIEnv *env)
     GdkAtom *cur_target = targets;
     selection_data_ctx ctx;
 
-    while(*cur_target != 0 && result == NULL) {
+    for (; *cur_target != 0 && result == NULL; ++cur_target) {
         if (dnd_target_receive_data(env, *cur_target, &ctx)) {
             stream = g_memory_input_stream_new_from_data(ctx.data, ctx.length * (ctx.format / 8),
                     (GDestroyNotify)g_free);
@@ -439,6 +439,12 @@ static jobject dnd_target_get_image(JNIEnv *env)
 
                 //Actually, we are converting RGBA to BGRA, but that's the same operation
                 data = (guchar*) convert_BGRA_to_RGBA((int*) data, stride, h);
+                if (!data) {
+                    g_object_unref(buf);
+                    g_object_unref(stream);
+                    continue;
+                }
+
                 data_array = env->NewByteArray(stride * h);
                 EXCEPTION_OCCURED(env);
                 env->SetByteArrayRegion(data_array, 0, stride*h, (jbyte*) data);
@@ -453,7 +459,6 @@ static jobject dnd_target_get_image(JNIEnv *env)
             }
             g_object_unref(stream);
         }
-        ++cur_target;
     }
     return result;
 }
diff --git a/modules/graphics/src/main/native-glass/gtk/glass_general.cpp b/modules/graphics/src/main/native-glass/gtk/glass_general.cpp
index 8c3bcf6f..ecd0d1c4 100644
--- a/modules/graphics/src/main/native-glass/gtk/glass_general.cpp
+++ b/modules/graphics/src/main/native-glass/gtk/glass_general.cpp
@@ -340,7 +340,15 @@ glass_throw_oom(JNIEnv * env, const char * message) {
 
 
 guint8* convert_BGRA_to_RGBA(const int* pixels, int stride, int height) {
+  if (stride <= 0 || height <= 0 || (height > INT_MAX / stride)) {
+    return NULL;
+  }
+
   guint8* new_pixels = (guint8*) g_malloc(height * stride);
+  if (!new_pixels) {
+    return NULL;
+  }
+
   int i = 0;
 
   for (i = 0; i < height * stride; i += 4) {
diff --git a/modules/graphics/src/main/native-glass/win/GlassClipboard.cpp b/modules/graphics/src/main/native-glass/win/GlassClipboard.cpp
index 8c79f620..a97a3b37 100644
--- a/modules/graphics/src/main/native-glass/win/GlassClipboard.cpp
+++ b/modules/graphics/src/main/native-glass/win/GlassClipboard.cpp
@@ -523,6 +523,7 @@ HRESULT PushImage(
     jint cdata = env->GetArrayLength(data);
     if (cdata < 8) {
         OLE_HRT(E_INVALIDARG)
+        OLE_RETURN_HR
     }
 
     jint w, h;
@@ -531,16 +532,27 @@ HRESULT PushImage(
     w = BSWAP_32(w);
     h = BSWAP_32(h);
 
-    int numPixels = w*h;
     OLE_HRT(checkJavaException(env))
-    if (cdata < (numPixels*4 + 8)) {
+    OLE_RETURN_HR_IF_FAILED
+
+    if (w <= 0 || h <= 0 || w > (INT_MAX / 4) / h) {
         OLE_HRT(E_INVALIDARG)
+        OLE_RETURN_HR
+    }
+
+    int numPixels = w*h;
+
+    if ((cdata - 8) < (numPixels * 4)) {
+        OLE_HRT(E_INVALIDARG)
+        OLE_RETURN_HR
     }
     jbyte *pBytes;
     Bitmap bitmap(w, h, (void **)&pBytes);
     OLE_CHECK_NOTNULL((HBITMAP)bitmap)
+    OLE_RETURN_HR_IF_FAILED
     env->GetByteArrayRegion(data, 8, numPixels*4, pBytes);
     OLE_HRT(checkJavaException(env))
+    OLE_RETURN_HR_IF_FAILED
 
     psm->hGlobal = bitmap.GetGlobalDIB();
     psm->tymed = TYMED_HGLOBAL;
@@ -1516,7 +1528,15 @@ HRESULT setDragImage(IDataObject *p)
         w = BSWAP_32(w);
         h = BSWAP_32(h);
 
+        if (w <= 0 || h <= 0 || w > (INT_MAX / 4) / h) {
+            return E_INVALIDARG;
+        }
+
         jsize bmpSize = w*h*4;
+        if (bmpSize > INT_MAX - header_size) {
+            return E_INVALIDARG;
+        }
+
         if (me.size() < jsize(header_size + bmpSize))
             return E_INVALIDARG;
 
@@ -1532,7 +1552,15 @@ HRESULT setDragImage(IDataObject *p)
         w = abs(lpbi->bmiHeader.biWidth);
         h = abs(lpbi->bmiHeader.biHeight);
 
+        if (w == 0 || h == 0 || w > (INT_MAX / 4) / h) {
+            return E_INVALIDARG;
+        }
+
         jsize bmpSize = w*h*4;
+        if (lpbi->bmiHeader.biSize > (DWORD)(INT_MAX - bmpSize)) {
+            return E_INVALIDARG;
+        }
+
         if (me.size() < jsize(bmpSize + lpbi->bmiHeader.biSize))
             return E_INVALIDARG;
 
diff --git a/modules/graphics/src/main/native-glass/win/OleUtils.h b/modules/graphics/src/main/native-glass/win/OleUtils.h
index 3f29a462..7460544a 100644
--- a/modules/graphics/src/main/native-glass/win/OleUtils.h
+++ b/modules/graphics/src/main/native-glass/win/OleUtils.h
@@ -142,6 +142,7 @@ inline void raise_error_empty(HRESULT hr) { }
 
 #define OLE_RETURN_SUCCESS return SUCCEEDED(_hr_);
 #define OLE_RETURN_HR      return _hr_;
+#define OLE_RETURN_HR_IF_FAILED if (FAILED(_hr_)) OLE_RETURN_HR
 #define OLE_HR             _hr_
 
 #define E_JAVAEXCEPTION  MAKE_HRESULT(SEVERITY_ERROR, 0xDE, 1)
diff --git a/modules/graphics/src/main/native-glass/win/Utils.h b/modules/graphics/src/main/native-glass/win/Utils.h
index 5f64efd8..d83da871 100644
--- a/modules/graphics/src/main/native-glass/win/Utils.h
+++ b/modules/graphics/src/main/native-glass/win/Utils.h
@@ -344,7 +344,8 @@ class MemHolder
 public:
     MemHolder(size_t count)
     {
-        m_pMem = reinterpret_cast<T *>(0==count
+        const bool invalid = (count == 0 || count > SIZE_MAX / sizeof(T));
+        m_pMem = reinterpret_cast<T *>(invalid
             ? NULL
             : malloc(count*sizeof(T)));
     }
-- 
2.30.1 (Apple Git-130)

