From 12eb75a020c074a42e3c9a33895a3cd90e3636fe Mon Sep 17 00:00:00 2001
From: Alexei Voitylov <avoitylov@openjdk.org>
Date: Tue, 14 Feb 2023 09:35:00 +0000
Subject: [PATCH] 8313072: Enhanced handling of Fonts

Reviewed-by:
---
 .../graphics/src/main/native-font/coretext.c  | 91 ++++++++++++++++---
 .../graphics/src/main/native-font/freetype.c  |  3 +
 2 files changed, 79 insertions(+), 15 deletions(-)

diff --git a/modules/graphics/src/main/native-font/coretext.c b/modules/graphics/src/main/native-font/coretext.c
index 0be78b44..c6bb63aa 100644
--- a/modules/graphics/src/main/native-font/coretext.c
+++ b/modules/graphics/src/main/native-font/coretext.c
@@ -28,6 +28,7 @@
 
 #if TARGET_OS_MAC
 
+#include <stdint.h>
 #include <jni.h>
 #include <com_sun_javafx_font_coretext_OS.h>
 
@@ -43,6 +44,12 @@
 
 #define OS_NATIVE(func) Java_com_sun_javafx_font_coretext_OS_##func
 
+#define SAFE_FREE(PTR)  \
+    if ((PTR) != NULL) {  \
+        free(PTR);     \
+        (PTR) = NULL;     \
+    }
+
 extern jboolean checkAndClearException(JNIEnv *env);
 
 jboolean checkAndClearException(JNIEnv *env)
@@ -641,7 +648,7 @@ JNIEXPORT jint JNICALL OS_NATIVE(CTRunGetGlyphs)
     CTRunRef run = (CTRunRef)runRef;
     const CGGlyph * glyphs = CTRunGetGlyphsPtr(run);
     CFIndex count = CTRunGetGlyphCount(run);
-    if (count == 0) {
+    if (count == 0 || count > SIZE_MAX / sizeof(CGGlyph)) {
         return 0;
     }
 
@@ -770,11 +777,20 @@ JNIEXPORT jbyteArray JNICALL OS_NATIVE(CGBitmapContextGetData)
     (JNIEnv *env, jclass that, jlong arg0, jint dstWidth, jint dstHeight, jint bpp)
 {
     jbyteArray result = NULL;
-    if (dstWidth < 0) return NULL;
-    if (dstHeight < 0) return NULL;
+    if (dstWidth <= 0) return NULL;
+    if (dstHeight <= 0) return NULL;
     if (bpp != 8 && bpp != 24) return NULL;
     CGContextRef context = (CGContextRef)arg0;
     if (context == NULL) return NULL;
+
+    //bits per pixel, either 8 for gray or 24 for LCD.
+    size_t dstStep = bpp / 8;
+    // for these checks we tested above that dstWidth/dstHeight/bpp cannot be 0
+    // checks are against INT_MAX - dst* variables are used later in
+    // (*env)->NewByteArray() which expects jint
+    if (dstWidth > (INT_MAX / dstStep)) return NULL;
+    if (dstHeight > (INT_MAX / (dstWidth * dstStep))) return NULL;
+
     jbyte *srcData = (jbyte*)CGBitmapContextGetData(context);
 
     if (srcData) {
@@ -784,12 +800,11 @@ JNIEXPORT jbyteArray JNICALL OS_NATIVE(CGBitmapContextGetData)
         size_t srcHeight =  CGBitmapContextGetHeight(context);
         if (srcHeight < dstHeight) return NULL;
         size_t srcBytesPerRow = CGBitmapContextGetBytesPerRow(context);
+        if (srcBytesPerRow == 0) return NULL;
+        if ((srcHeight - dstHeight) > SIZE_MAX / srcBytesPerRow) return NULL;
         size_t srcStep = CGBitmapContextGetBitsPerPixel(context) / 8;
-        int srcOffset = (srcHeight - dstHeight) * srcBytesPerRow;
+        size_t srcOffset = (srcHeight - dstHeight) * srcBytesPerRow;
 
-
-        //bits per pixel, either 8 for gray or 24 for LCD.
-        int dstStep = bpp / 8;
         size_t size = dstWidth * dstHeight * dstStep;
         jbyte* data = (jbyte*)calloc(size, sizeof(jbyte));
         if (data == NULL) return NULL;
@@ -944,18 +959,37 @@ static const int DEFAULT_LEN_TYPES = 10;
 static const int DEFAULT_LEN_COORDS = 50;
 typedef struct _PathData {
     jbyte* pointTypes;
-    int numTypes;
-    int lenTypes;
+    size_t numTypes;
+    size_t lenTypes;
     jfloat* pointCoords;
-    int numCoords;
-    int lenCoords;
+    size_t numCoords;
+    size_t lenCoords;
 } PathData;
 
 void pathApplierFunctionFast(void *i, const CGPathElement *e) {
     PathData *info = (PathData *)i;
+
+    // point data buffers should always be valid, skip consecutive path
+    // applications if realloc() calls failed earlier on
+    if (info->pointTypes == NULL || info->pointCoords == NULL) {
+        return;
+    }
+
     if (info->numTypes == info->lenTypes) {
+        if (info->lenTypes > SIZE_MAX - DEFAULT_LEN_TYPES) {
+            goto fail;
+        }
         info->lenTypes += DEFAULT_LEN_TYPES;
-        info->pointTypes = (jbyte*)realloc(info->pointTypes, info->lenTypes * sizeof(jbyte));
+
+        if (info->lenTypes > (SIZE_MAX / sizeof(jbyte))) {
+            goto fail;
+        }
+        jbyte* newPointTypes = (jbyte*)realloc(info->pointTypes, info->lenTypes * sizeof(jbyte));
+        if (newPointTypes == NULL) {
+            goto fail;
+        }
+
+        info->pointTypes = newPointTypes;
     }
     jint type;
     int coordCount = 0;
@@ -984,8 +1018,20 @@ void pathApplierFunctionFast(void *i, const CGPathElement *e) {
     info->pointTypes[info->numTypes++] = type;
 
     if (info->numCoords + (coordCount * 2) > info->lenCoords) {
+        if (info->lenCoords > SIZE_MAX - DEFAULT_LEN_COORDS) {
+            goto fail;
+        }
         info->lenCoords += DEFAULT_LEN_COORDS;
-        info->pointCoords = (jfloat*)realloc(info->pointCoords, info->lenCoords * sizeof(jfloat));
+
+        if (info->lenCoords > (SIZE_MAX / sizeof(jfloat))) {
+            goto fail;
+        }
+        jfloat* newPointCoords = (jfloat*)realloc(info->pointCoords, info->lenCoords * sizeof(jfloat));
+        if (newPointCoords == NULL) {
+            goto fail;
+        }
+
+        info->pointCoords = newPointCoords;
     }
     int j;
     for (j = 0; j < coordCount; j++) {
@@ -993,6 +1039,13 @@ void pathApplierFunctionFast(void *i, const CGPathElement *e) {
         info->pointCoords[info->numCoords++] = pt.x;
         info->pointCoords[info->numCoords++] = pt.y;
     }
+
+    return;
+
+fail:
+    fprintf(stderr, "OS_NATIVE error: pathApplierFunctionFast allocations failed");
+    SAFE_FREE(info->pointCoords);
+    SAFE_FREE(info->pointTypes);
 }
 
 JNIEXPORT jobject JNICALL OS_NATIVE(CGPathApply)
@@ -1007,8 +1060,16 @@ JNIEXPORT jobject JNICALL OS_NATIVE(CGPathApply)
     data.numCoords = 0;
     data.lenCoords = DEFAULT_LEN_COORDS;
 
+    if (data.pointTypes == NULL || data.pointCoords == NULL) {
+        goto fail;
+    }
+
     CGPathApply((CGPathRef)arg0, &data, pathApplierFunctionFast);
 
+    if (data.pointTypes == NULL || data.pointCoords == NULL) {
+        goto fail;
+    }
+
     static jclass path2DClass = NULL;
     static jmethodID path2DCtr = NULL;
     if (path2DClass == NULL) {
@@ -1047,8 +1108,8 @@ JNIEXPORT jobject JNICALL OS_NATIVE(CGPathApply)
         }
     }
 fail:
-    free(data.pointTypes);
-    free(data.pointCoords);
+    SAFE_FREE(data.pointTypes);
+    SAFE_FREE(data.pointCoords);
     return path2D;
 }
 
diff --git a/modules/graphics/src/main/native-font/freetype.c b/modules/graphics/src/main/native-font/freetype.c
index 27bc67d1..6b49a744 100644
--- a/modules/graphics/src/main/native-font/freetype.c
+++ b/modules/graphics/src/main/native-font/freetype.c
@@ -30,6 +30,7 @@
 #include <com_sun_javafx_font_freetype_OSFreetype.h>
 #include <dlfcn.h>
 #include <ft2build.h>
+#include <stdint.h>
 #include <errno.h>
 #include FT_FREETYPE_H
 #include FT_OUTLINE_H
@@ -367,6 +368,8 @@ JNIEXPORT jbyteArray JNICALL OS_NATIVE(getBitmapData)(JNIEnv *env, jclass that,
     FT_Bitmap bitmap = slot->bitmap;
     unsigned char* src = bitmap.buffer;
     if (!src) return NULL;
+    if (bitmap.pitch <= 0) return NULL;
+    if (bitmap.rows > INT_MAX / bitmap.pitch) return NULL;
     size_t size = bitmap.pitch * bitmap.rows;
     jbyteArray result = (*env)->NewByteArray(env, size);
     if (result) {
-- 
2.30.1 (Apple Git-130)

